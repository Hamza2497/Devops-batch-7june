Connect to the lab

Open the terminal on the lab.

become aroot user on lab

# sudo su -

# cd myproject


Create a feature branch in git  and switch to the branch

========================================

# git branch

Create a new branch

# git branch feature1

Switch to the new branch

# git checkout feature1

[OR]

Create a new branch and switch to the branch also

# git checkout -b feature2

3. Merge the commits/files of new branch to master

Before merging always switch to the destination branch

# git checkout master

# git merge feature1 master

< git merge sourcebranch destinationbranch>


Check which branches are merged to master

git branch -a --merged master

Check which branches are not merged to master

git branch -a --no-merged master


4. Delete a branch which is not merged with master branch

# git branch -D <branchname>

Delete a branch whose commits have been merged with the master branch

# git branch -d feature1


=================================================

Working on Remote repository:
================================


Create a Personal Access token on github
It is a authentication method which very secure
This is used whenever we have to push files or changes from Local to remote repo
There is no concept of using password, instead we have to use Personal access token in git locally

Demo:

In the main menu Go to settings of github → on the left side →scroll down to developer settings → go to Personal Access tokens →Click on tokens (classic)---> Generate New token→ select token classic
Note→ give a name to the token
Expiration -> 30 days
Select scope : repo (1 checkbox) 
Click on generate token

Make sure to copy your personal access token now. You won’t be able to see it again! 



> click on New button to create a remote repo
> Name to the repository
> select public repo
> click on Create repository









Demo 3: Connect Local repo to remote repo

Go to git and execute this command

  $ git remote add origin <your remote repo Path>

Example like this:
…
 git remote add origin https://github.com/Sonal0409/myproject06nov.git
…

Execute the command to check local and remote repo is set:

  $ git remote -v



Assignment

To remove local repo and remote repo connection:

$ git remote rm origin

Command that can be used to update existing remote origin:

$ git remote set-url origin <url>


=======================================

PUSH the master branch to remote repo
===========================

On the remote repo we have no code, no files no commits and no branches


# git checkout master

# git push origin master

Here origin means variable storing path of remote repo 


It will now ask to enter username

Username for 'https://github.com':

Here enter the token and press enter key

Again it will ask for password

Here enter the token and press enter key

JUST PRESS ENTER KEY

It will send the files and commits to remote.
==========================

Pulling file from remote github repo  to local repo
****************************************

In your git hub repo , add some new files:

And commit them in github

Pull those files to your local
…
 git pull origin master
…


Pull the files from remote and merge with local repo and working directory

Cloning a Repo

Forking a Repo

=============================================

Jenkins Demo:

1. Create a Freestyle job in jenkins

2. Create a freestyle job and integrate it with GITHUB repostitory

Demo 1: Create a Jenkisn job that will clone a github repository in jenkins workspace

Create a new job in jenkins
Click on + sign to create new item/job/project
Give a name to the job : CloneRepo
Select freestyle project and click on OK button
On the project click on Source code management
Select git option
Give git hub repo path
https://github.com/Sonal0409/myproject05Aug

Branch name as ===>  Master

Save the job

Click on Build now

Repository will be cloned in jenkins workspace

You can go to job → workspace folder to see the files

=======================

Demo 2: Jenkins + maven integration:

Jenkins--> Manage Jenkins-->Global Tool configuration

Under GIT==> leave it same 

Under maven ==> lets install it automatically
Type mymaven and check the install automatically box.
Save the changes


**********************************
Job Package Job
***************************

Go to jenkins--> new item--> Name= Package==> freestyle project
==> source codemanagement==>select git==> give git repo name https://github.com/Sonal0409/DevOpsClassCodes
 
build ==> invoke top level maven target==>mymaven

 goal = clean install package

==> save==> build now
==> click on build number and see the console

==> go to workspace ==> target/addressbook.war

==========================================================================


pipelines Using plugins are called as Plugin based pipelines or Upstream and downstream pipelines
These pipelines are created using freestyle jobs.

Jenkins allows us to create multiple task in one single job.

Whenever a user has to perfom set of tasks one after other (in a sequence) or in parallel, it can easily be done using 
pipleine template in jenkins

Pipleines in jenkins are nothing but set of task executed in sequence(by default) 

When a user is creating a pipeline we will have to write code for it.
The pipeline code is based on Groovy scripting which is Domain specific lanaguage
In jenkins pipeline code using 2 types of syntax

 > scripted pipeline syntax
=======================================
> scripted pipeline syntax always starts with a keyword called as node
> When Jenkins version1 came in to the market, the admin used scripted pipeline syntax to write pipeline code
> scripted pipeline syntax is difficult to read and write.
> there is no structure or no definite style which writitng the code
> The code written scripted pipeline syntax is not validated by jenkins
> This syntax is no longer used
> if the pipeline fails, you have to run the pipeline from the begining

 > Declarative pipeline syntax
========================================
> Declarative pipeline syntax always starts with a keyword called as pipeline
> With jenkins version2, Declarative pipeline syntax was introduced
> This is well structured syntax, where user is provided with definite pipeline sections
> we need to just declare the pipeline code
> It declarative in nature, syntax is very simple
> if the pipeline failes, you can restart the pipeline form the point that it had failed previously
> Stages in pipeline means Job to be executed
> Every stage will have a Name in the pipeline, steps to be executed, post build steps, 
> jenkins provides a pipeline code snippet generator, that helps your to learn pipeline scripting very fast

Syntax:  key 'value' 
for example: name 'Jenkins'
             sh 'echo "hello All"'

Structure of Declarative pipeline syntax

=========================================

pipeline{

  tools{
		// declare names of tools that will while executing pipeline tasks
}

parameters{

}
agent {
// this is mandatory
// which server the pipleline will be executed
}

stages{
  stage('job1'){
	steps{
		//clone a repo
       }
}
stage('job2'){
	steps{
		sh 'mkdir myfiles'
 		sh 'cd myfiles'
        sh 'mvn compile'
       }
}
stage('job3'){
	steps{
		//clone a repo
       }
}

}

}

==============================
Demo  on pipeline code

==============================


pipeline{
    
    tools{
        maven 'mymaven'
    }
   // in agent any = any available server 
    agent any
   stages{
       stage('Clone a Repo'){
           steps{
               git 'https://github.com/Sonal0409/DevOpsCodeDemo.git'
           }
       }
       
       stage('Compile the code'){
           steps{
               sh 'mvn compile'
           }
       }
       
       stage('Unit Test'){
           steps{
               sh 'mvn test'
           }
       }
       
       stage('Package'){
           steps{
               sh 'mvn package'
           }
       }
       }
}








