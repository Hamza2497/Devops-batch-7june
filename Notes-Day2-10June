Steps to connect to the lab:
============================================

Go to DevOps Certification Training and click onlabs
On the left side --> select practice labs
Select the tab DevOps Updated VM 
Click on launch lab --> again click on launch lab
Click on RDP ACCESS
Click on start Instance
Once is the lab has started .. click on RDP access and click on blue button which is there for Auth Url
Lab will start in the new tab.
Click on Terminal button at the bottom(black square) in the lab desktop


Demo Steps:
================================================

1. Become root user:

# sudo su -

3. Create a Local repository using GIT

#  mkdir myproject

# cd myproject

# touch index1.html index2.html

# ls

# git init

A local repository will be created

# ls -al

.git folder will be available, which is your local repository.


4. Add the configuration parameters in git, which will later update author and email details in the git commit history

2 variables need to be set

user.name
user.email


# git config --global user.name sonal0409

# git config --global user.email admin@gmail.com

List the configurations:

git config --list

try it latter
==========================
git config --global --unset user.name

git config --global --unset user.email



5. Add the files to the stagging area and commit them to Local repo
=========================================

# git status

# git add <filename> <filename2>

or

git add --all

or

git add .

or

git add *.java *.php

# git status

# git commit -m "adding file index1.html"

Commit all the changes/files in the stagging area

If we want to Choose a file to be commited

git commit -m "adding file index1.html" <filename>

================================================

Modify exisitng files and add those changes to local repo
====================================================

Take a file which is in local repo

# git ls-files

# vim index1.html

add any data & save the file

# git status

status of file is modified

To add all the modification and commit them to local repo

# git commit -a -m "added modifications"

=================================================
1. Check the log for commit history

# git log

in this HEAD it is an object in git which represents the latest/recent commit id

# git log --oneline

Check commit history of every commit in a single line

# git show <commid id>
Shows what happened in that commit.

See commits of a particular file:

 git log --graph --all -- index1.html

==============================================================

Delete a file form LR and WD
===================================================================
# git rm index1.html

==> this command deletes file from WD and LR
As we have deleted somethign on LR/made chnage on LR , we need to track that. So commit the deletion

# git commit -m "deleted file"

# git ls-files
# ls
File will not be in localrepo and WD

========================================================

Revert command in GIT
=========================================================
> This command is applicable only to commit id
> using this command we cna revert the chnages of the commit to its previous state
> but when a revert command is executed, it is chnage something on the LR, so there needs to be a commit again
> When revert command is executed, immediatly a nano editor where user will eneter a message why we are reverting
> save the file. Revert will be complete and a new commit id will be generated

# git revert <deletioncommitid>

=========================================================


GIT REST
===============================================

Git reset operation:
===============================
Demo:

Create a new file --> commit on it

# touch resetdemo
# git add .
# git commit -m "added a new file resetdemo"

Make some small modification on the file --> commit on it
Make some small modification on the file --> commit on it
Make some small modification on the file --> commit on it
Make some small modification on the file --> commit on it
Make some small modification on the file --> commit on it

Which mean I will have a very length git commit history

Every small change I have committed it

We always want a clean and crisp commit history

Git says, you can RESET your commit history

   that means:
     > we can Change the HEAD of the log
     > we can delete commit ids
     > we can move the changes from LR to Staging area
     > we can move the changes from LR to Working area
     > we can also permanently delete commits and changes in LR and working directory

the command is : git reset <commit id>

What is it that we have to reset, > we want to reset the HEAD to the given <commit id>

#  git reset d573778

So what about the commits before the given the <commit id> --> they will get deleted

So what about the changes we did as part of those commits?

There 3 options that can be given with git reset command


--soft:

    Observation: 
     > In the git log, the commit history is reset -> all the commits which are above the given <commitID> get deleted
     > Now the HEAD is the  <Commitid> given in the command
     > All the changes of the deleted commits will be back to staging area.


--mixed

Observation: 
 > In the git log, the commit history is reset -> all the commits which are above the given <commitID> get deleted
 > Now the HEAD is the  <Commitid> given in the command
 > All the changes of the deleted commits will be back to working directory

--hard
=============================
Observation: 
 > In the git log, the commit history is reset -> all the commits which are above the given <commitID> get deleted
 > Now the HEAD is the  <Commitid> given in the command
 > All the changes of the deleted commits will also be permanently deleted



# git log --oneline

Select the commit id which is at the bottom of your log.



# git reset --hard <commit id>

Example : git reset --hard 04f432e





When you execute 

# git status

If you have Untracked files, modified files.

# git add .

# git commit -m "done"




Assignment:
======================

# git log --oneline

# git reset --soft <commit id>

# git status

# git commit -m “added all changes”

=====================


# git log --oneline

# git reset --mixed <commit id>

# git status

# git add .

# git commit -m “added all changes”

=================================================





